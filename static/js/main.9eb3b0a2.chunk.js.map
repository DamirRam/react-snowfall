{"version":3,"sources":["components/GithubLink/GithubLink.tsx","context/settings.tsx","components/Settings/theme.tsx","components/Settings/Settings.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["GithubLink","_ref","url","react","href","className","aria-label","width","height","viewBox","aria-hidden","d","join","fill","style","transformOrigin","SettingsContext","createContext","theme","createMuiTheme","palette","type","primary","main","ThemeProvider","children","MuiThemeProvider","colors","Settings","settings","useContext","react_default","a","createElement","theme_ThemeProvider","Paper","Typography","gutterBottom","snowflakeCount","Slider","value","min","max","step","onChange","_","setSnowflakeCount","Box","my","color","lib","onChangeComplete","setColor","hex","githubURL","process","App","Snowfall_default","src","alt","components_Settings_Settings","components_GithubLink_GithubLink","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","Provider","src_App_0","document","getElementById","URL","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9eb3b0a2.chunk.js","sourcesContent":["import * as React from 'react'\nimport './GithubLink.css'\n\nexport interface GithubLinkProps {\n  url: string\n}\n\nconst GithubLink: React.SFC<GithubLinkProps> = ({ url }) => (\n  <a href={url} className=\"github-corner\" aria-label=\"View source on GitHub\">\n    <svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\" aria-hidden=\"true\">\n      <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n      <path\n        d={[\n          'M128.3,109.0',\n          'C113.8,99.7',\n          '119.0,89.6',\n          '119.0,89.6',\n          'C122.0,82.7',\n          '120.5,78.6',\n          '120.5,78.6',\n          'C119.2,72.0',\n          '123.4,76.3',\n          '123.4,76.3',\n          'C127.3,80.9',\n          '125.5,87.3',\n          '125.5,87.3',\n          'C122.9,97.6',\n          '130.6,101.9',\n          '134.4,103.2'\n        ].join(' ')}\n        fill=\"currentColor\"\n        style={{ transformOrigin: '130px 106px' }}\n        className=\"octo-arm\"\n      />\n      <path\n        d={[\n          'M115.0,115.0',\n          'C114.9,115.1',\n          '118.7,116.5',\n          '119.8,115.4',\n          'L133.7,101.6',\n          'C136.9,99.2',\n          '139.9,98.4',\n          '142.2,98.6',\n          'C133.8,88.0',\n          '127.5,74.4',\n          '143.8,58.0',\n          'C148.5,53.4',\n          '154.0,51.2',\n          '159.7,51.0',\n          'C160.3,49.4',\n          '163.2,43.6',\n          '171.4,40.1',\n          'C171.4,40.1',\n          '176.1,42.5',\n          '178.8,56.2',\n          'C183.1,58.6',\n          '187.2,61.8',\n          '190.9,65.4',\n          'C194.5,69.0',\n          '197.7,73.2',\n          '200.1,77.6',\n          'C213.8,80.2',\n          '216.3,84.9',\n          '216.3,84.9',\n          'C212.7,93.1',\n          '206.9,96.0',\n          '205.4,96.6',\n          'C205.1,102.4',\n          '203.0,107.8',\n          '198.3,112.5',\n          'C181.9,128.9',\n          '168.3,122.5',\n          '157.7,114.1',\n          'C157.9,116.9',\n          '156.7,120.9',\n          '152.7,124.9',\n          'L141.0,136.5',\n          'C139.8,137.7',\n          '141.6,141.9',\n          '141.8,141.8',\n          'Z'\n        ].join(' ')}\n        fill=\"currentColor\"\n      />\n    </svg>\n  </a>\n)\n\nexport default GithubLink\n","import React, { createContext, useState, FC } from 'react'\nimport { SnowfallProps } from 'react-snowfall'\n\nexport interface SnowfallSettings extends SnowfallProps {\n  setColor: (color: string) => void\n  setSnowflakeCount: (count: number) => void\n}\n\nexport const SettingsContext = createContext<Partial<SnowfallSettings>>({})\n\nexport const StateProvider: FC = ({ children }) => {\n  const [color, setColor] = useState('#dee4fd')\n  const [snowflakeCount, setSnowflakeCount] = useState(200)\n\n  return (\n    <SettingsContext.Provider value={{ color, setColor, snowflakeCount, setSnowflakeCount }}>\n      {children}\n    </SettingsContext.Provider>\n  )\n}\n","import * as React from 'react'\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles'\n\nexport const theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: 'rgba(33, 150, 243, 0.87)'\n    }\n  }\n})\n\nexport const ThemeProvider: React.FC = ({ children }) => {\n  return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n}\n","import React, { useContext } from 'react'\nimport { CirclePicker } from 'react-color'\nimport Box from '@material-ui/core/Box'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Slider from '@material-ui/lab/Slider'\nimport { SettingsContext, SnowfallSettings } from '../../context/settings'\nimport { ThemeProvider } from './theme'\n\nimport './Settings.css'\n\nconst colors = [\n  '#dee4fd',\n  '#e91e63',\n  '#9c27b0',\n  '#673ab7',\n  '#3f51b5',\n  '#2196f3',\n  '#03a9f4',\n  '#00bcd4',\n  '#009688',\n  '#4caf50',\n  '#8bc34a',\n  '#cddc39',\n  '#ffeb3b',\n  '#ffc107',\n  '#ff9800',\n  '#ff5722',\n  '#795548',\n  '#607d8b'\n]\n\nconst Settings = () => {\n  const settings = useContext(SettingsContext) as SnowfallSettings\n\n  return (\n    <ThemeProvider>\n      <Paper className=\"settings-container\">\n        <Typography gutterBottom>Snowflake Count - {settings.snowflakeCount}</Typography>\n        <Slider\n          value={settings.snowflakeCount}\n          min={0}\n          max={750}\n          step={1}\n          onChange={(_, value) => settings.setSnowflakeCount(value as number)}\n        />\n        <Box my={2}>\n          <Typography gutterBottom>Color - {settings.color}</Typography>\n          <CirclePicker\n            colors={colors}\n            width=\"100%\"\n            color={settings.color}\n            onChangeComplete={value => settings.setColor(value.hex)}\n          />\n        </Box>\n      </Paper>\n    </ThemeProvider>\n  )\n}\n\nexport default Settings\n","import React, { useContext } from 'react'\nimport Snowfall from 'react-snowfall'\nimport GithubLink from './components/GithubLink/GithubLink'\nimport Settings from './components/Settings'\nimport { SettingsContext } from './context/settings'\nimport './App.css'\n\nconst githubURL = process.env.REACT_APP_GITHUB_URL as string\nconst packageName = process.env.REACT_APP_PACKAGE_NAME as string\n\nconst App = () => {\n  const settings = useContext(SettingsContext)\n\n  return (\n    <div className=\"app\">\n      <Snowfall color={settings.color} snowflakeCount={settings.snowflakeCount} />\n      <a className=\"title\" href={githubURL} style={{ color: settings.color }}>\n        <img src=\"./android-chrome-512x512.png\" alt=\"Snowflake Logo\" />\n        <h1>{packageName}</h1>\n      </a>\n      <Settings />\n      <GithubLink url={githubURL} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { StateProvider } from './context/settings'\n\nReactDOM.render(\n  <StateProvider>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n)\n\nserviceWorker.register()\n"],"sourceRoot":""}