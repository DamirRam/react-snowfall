{"version":3,"sources":["GithubLink.tsx","App.tsx","serviceWorker.js","index.js"],"names":["GithubLink","_ref","url","react","href","className","aria-label","width","height","viewBox","style","fill","color","position","top","border","right","zIndex","aria-hidden","d","join","transformOrigin","githubURL","process","App","react_default","a","createElement","src_GithubLink","Snowfall_default","snowflakeCount","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4MAsGeA,EAhGgC,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,IAAH,OAC7CC,EAAA,mBAAGC,KAAMF,EAAKG,UAAU,gBAAgBC,aAAW,yBACjDH,EAAA,qBACEI,MAAM,KACNC,OAAO,KACPC,QAAQ,cACRC,MAAO,CACLC,KAAM,UACNC,MAAO,OACPC,SAAU,WACVC,IAAK,EACLC,OAAQ,EACRC,MAAO,EACPC,OAAQ,GAEVC,cAAY,QAEZf,EAAA,sBAAMgB,EAAE,sDACRhB,EAAA,sBACEgB,EAAG,CACD,eACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,cACA,eACAC,KAAK,KACPT,KAAK,eACLD,MAAO,CAAEW,gBAAiB,eAC1BhB,UAAU,aAEZF,EAAA,sBACEgB,EAAG,CACD,eACA,eACA,cACA,cACA,eACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,eACA,cACA,cACA,eACA,cACA,cACA,eACA,cACA,cACA,eACA,eACA,cACA,cACA,KACAC,KAAK,KACPT,KAAK,oBC3FPW,SAAYC,yCAeHC,mLAXX,OACEC,EAAAC,EAAAC,cAAA,OAAKtB,UAAU,OACboB,EAAAC,EAAAC,cAACC,EAAD,CAAY1B,IAAKoB,IACjBG,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAUI,eAAgB,MAC1BL,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,KAAGvB,KAAMkB,GAAT,2BAPUS,aCKZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC3FjEC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIxC,YAAwBW,OAAOC,SAAS/B,MACpD4D,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAA2B,OAAM3C,YAAN,sBAEPS,GAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,GACHK,KAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,KAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,KAAK,WAC7BV,OAAOC,SAASyC,aAKpBtC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,MC5C/BE","file":"static/js/main.b6ed162f.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\nexport interface GithubLinkProps {\r\n  url: string\r\n}\r\n\r\nconst GithubLink: React.SFC<GithubLinkProps> = ({ url }) => (\r\n  <a href={url} className=\"github-corner\" aria-label=\"View source on GitHub\">\r\n    <svg\r\n      width=\"80\"\r\n      height=\"80\"\r\n      viewBox=\"0 0 250 250\"\r\n      style={{\r\n        fill: '#64CEAA',\r\n        color: '#fff',\r\n        position: 'absolute',\r\n        top: 0,\r\n        border: 0,\r\n        right: 0,\r\n        zIndex: 5\r\n      }}\r\n      aria-hidden=\"true\"\r\n    >\r\n      <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\r\n      <path\r\n        d={[\r\n          'M128.3,109.0',\r\n          'C113.8,99.7',\r\n          '119.0,89.6',\r\n          '119.0,89.6',\r\n          'C122.0,82.7',\r\n          '120.5,78.6',\r\n          '120.5,78.6',\r\n          'C119.2,72.0',\r\n          '123.4,76.3',\r\n          '123.4,76.3',\r\n          'C127.3,80.9',\r\n          '125.5,87.3',\r\n          '125.5,87.3',\r\n          'C122.9,97.6',\r\n          '130.6,101.9',\r\n          '134.4,103.2'\r\n        ].join(' ')}\r\n        fill=\"currentColor\"\r\n        style={{ transformOrigin: '130px 106px' }}\r\n        className=\"octo-arm\"\r\n      />\r\n      <path\r\n        d={[\r\n          'M115.0,115.0',\r\n          'C114.9,115.1',\r\n          '118.7,116.5',\r\n          '119.8,115.4',\r\n          'L133.7,101.6',\r\n          'C136.9,99.2',\r\n          '139.9,98.4',\r\n          '142.2,98.6',\r\n          'C133.8,88.0',\r\n          '127.5,74.4',\r\n          '143.8,58.0',\r\n          'C148.5,53.4',\r\n          '154.0,51.2',\r\n          '159.7,51.0',\r\n          'C160.3,49.4',\r\n          '163.2,43.6',\r\n          '171.4,40.1',\r\n          'C171.4,40.1',\r\n          '176.1,42.5',\r\n          '178.8,56.2',\r\n          'C183.1,58.6',\r\n          '187.2,61.8',\r\n          '190.9,65.4',\r\n          'C194.5,69.0',\r\n          '197.7,73.2',\r\n          '200.1,77.6',\r\n          'C213.8,80.2',\r\n          '216.3,84.9',\r\n          '216.3,84.9',\r\n          'C212.7,93.1',\r\n          '206.9,96.0',\r\n          '205.4,96.6',\r\n          'C205.1,102.4',\r\n          '203.0,107.8',\r\n          '198.3,112.5',\r\n          'C181.9,128.9',\r\n          '168.3,122.5',\r\n          '157.7,114.1',\r\n          'C157.9,116.9',\r\n          '156.7,120.9',\r\n          '152.7,124.9',\r\n          'L141.0,136.5',\r\n          'C139.8,137.7',\r\n          '141.6,141.9',\r\n          '141.8,141.8',\r\n          'Z'\r\n        ].join(' ')}\r\n        fill=\"currentColor\"\r\n      />\r\n    </svg>\r\n  </a>\r\n)\r\n\r\nexport default GithubLink\r\n","import React, { Component } from 'react'\r\nimport Snowfall from '@cahil/snowfall'\r\nimport GithubLink from './GithubLink'\r\nimport './App.css'\r\n\r\nconst githubURL = process.env.REACT_APP_GITHUB_URL as string\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <GithubLink url={githubURL} />\r\n        <Snowfall snowflakeCount={250} />\r\n        <h1>snowfall</h1>\r\n        <a href={githubURL}>@cahil/snowfall</a>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\nserviceWorker.register()\r\n"],"sourceRoot":""}