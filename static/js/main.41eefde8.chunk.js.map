{"version":3,"sources":["components/GithubLink/GithubLink.tsx","context/settings.tsx","components/Settings/theme.tsx","components/Settings/Settings.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["GithubLink","url","href","className","aria-label","width","height","viewBox","aria-hidden","d","join","fill","style","transformOrigin","SettingsContext","createContext","StateProvider","children","useState","color","setColor","snowflakeCount","setSnowflakeCount","radius","setRadius","speed","setSpeed","wind","setWind","Provider","value","theme","createMuiTheme","palette","type","primary","main","ThemeProvider","colors","Settings","settings","useContext","Paper","Typography","gutterBottom","Slider","min","max","step","onChange","_","Box","my","onChangeComplete","hex","githubURL","process","App","src","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.41eefde8.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport './GithubLink.css'\r\n\r\nexport interface GithubLinkProps {\r\n  url: string\r\n}\r\n\r\nconst GithubLink: React.SFC<GithubLinkProps> = ({ url }) => (\r\n  <a href={url} className=\"github-corner\" aria-label=\"View source on GitHub\">\r\n    <svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\" aria-hidden=\"true\">\r\n      <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\r\n      <path\r\n        d={[\r\n          'M128.3,109.0',\r\n          'C113.8,99.7',\r\n          '119.0,89.6',\r\n          '119.0,89.6',\r\n          'C122.0,82.7',\r\n          '120.5,78.6',\r\n          '120.5,78.6',\r\n          'C119.2,72.0',\r\n          '123.4,76.3',\r\n          '123.4,76.3',\r\n          'C127.3,80.9',\r\n          '125.5,87.3',\r\n          '125.5,87.3',\r\n          'C122.9,97.6',\r\n          '130.6,101.9',\r\n          '134.4,103.2'\r\n        ].join(' ')}\r\n        fill=\"currentColor\"\r\n        style={{ transformOrigin: '130px 106px' }}\r\n        className=\"octo-arm\"\r\n      />\r\n      <path\r\n        d={[\r\n          'M115.0,115.0',\r\n          'C114.9,115.1',\r\n          '118.7,116.5',\r\n          '119.8,115.4',\r\n          'L133.7,101.6',\r\n          'C136.9,99.2',\r\n          '139.9,98.4',\r\n          '142.2,98.6',\r\n          'C133.8,88.0',\r\n          '127.5,74.4',\r\n          '143.8,58.0',\r\n          'C148.5,53.4',\r\n          '154.0,51.2',\r\n          '159.7,51.0',\r\n          'C160.3,49.4',\r\n          '163.2,43.6',\r\n          '171.4,40.1',\r\n          'C171.4,40.1',\r\n          '176.1,42.5',\r\n          '178.8,56.2',\r\n          'C183.1,58.6',\r\n          '187.2,61.8',\r\n          '190.9,65.4',\r\n          'C194.5,69.0',\r\n          '197.7,73.2',\r\n          '200.1,77.6',\r\n          'C213.8,80.2',\r\n          '216.3,84.9',\r\n          '216.3,84.9',\r\n          'C212.7,93.1',\r\n          '206.9,96.0',\r\n          '205.4,96.6',\r\n          'C205.1,102.4',\r\n          '203.0,107.8',\r\n          '198.3,112.5',\r\n          'C181.9,128.9',\r\n          '168.3,122.5',\r\n          '157.7,114.1',\r\n          'C157.9,116.9',\r\n          '156.7,120.9',\r\n          '152.7,124.9',\r\n          'L141.0,136.5',\r\n          'C139.8,137.7',\r\n          '141.6,141.9',\r\n          '141.8,141.8',\r\n          'Z'\r\n        ].join(' ')}\r\n        fill=\"currentColor\"\r\n      />\r\n    </svg>\r\n  </a>\r\n)\r\n\r\nexport default GithubLink\r\n","import React, { createContext, useState, FC } from 'react'\r\nimport { SnowfallProps } from 'react-snowfall'\r\n\r\nexport interface SnowfallSettings extends SnowfallProps {\r\n  setColor: (color: string) => void\r\n  setSnowflakeCount: (count: number) => void\r\n  setSpeed: (speed: [number, number]) => void\r\n  setWind: (wind: [number, number]) => void\r\n  setRadius: (radius: [number, number]) => void\r\n}\r\n\r\nexport const SettingsContext = createContext<Partial<SnowfallSettings>>({})\r\n\r\nexport const StateProvider: FC = ({ children }) => {\r\n  const [color, setColor] = useState('#dee4fd')\r\n  const [snowflakeCount, setSnowflakeCount] = useState(200)\r\n  const [radius, setRadius] = useState<[number, number]>([0.5, 3.0])\r\n  const [speed, setSpeed] = useState<[number, number]>([0.5, 3.0])\r\n  const [wind, setWind] = useState<[number, number]>([-0.5, 2.0])\r\n\r\n  return (\r\n    <SettingsContext.Provider value={{ color, setColor, snowflakeCount, setSnowflakeCount, radius, setRadius, wind, setWind, speed, setSpeed }}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  )\r\n}\r\n","import * as React from 'react'\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles'\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: 'rgba(33, 150, 243, 0.87)'\r\n    }\r\n  }\r\n})\r\n\r\nexport const ThemeProvider: React.FC = ({ children }) => {\r\n  return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { CirclePicker } from 'react-color'\r\nimport Box from '@material-ui/core/Box'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Slider from '@material-ui/lab/Slider'\r\nimport { SettingsContext, SnowfallSettings } from '../../context/settings'\r\nimport { ThemeProvider } from './theme'\r\n\r\nimport './Settings.css'\r\n\r\nconst colors = [\r\n  '#dee4fd',\r\n  '#e91e63',\r\n  '#9c27b0',\r\n  '#673ab7',\r\n  '#3f51b5',\r\n  '#2196f3',\r\n  '#03a9f4',\r\n  '#00bcd4',\r\n  '#009688',\r\n  '#4caf50',\r\n  '#8bc34a',\r\n  '#cddc39',\r\n  '#ffeb3b',\r\n  '#ffc107',\r\n  '#ff9800',\r\n  '#ff5722',\r\n  '#795548',\r\n  '#607d8b'\r\n]\r\n\r\nconst Settings = () => {\r\n  const settings = useContext(SettingsContext) as SnowfallSettings\r\n\r\n  return (\r\n    <ThemeProvider>\r\n      <Paper className=\"settings-container\">\r\n        <Typography gutterBottom>Snowflake Count - {settings.snowflakeCount}</Typography>\r\n        <Slider\r\n          value={settings.snowflakeCount}\r\n          min={0}\r\n          max={750}\r\n          step={1}\r\n          onChange={(_, value) => settings.setSnowflakeCount(value as number)}\r\n        />\r\n        <Typography gutterBottom>Speed - Min {settings?.speed?.[0]} Max {settings?.speed?.[1]}</Typography>\r\n        <Slider\r\n          value={settings.speed}\r\n          min={0}\r\n          max={10}\r\n          step={0.5}\r\n          onChange={(_, value) => settings.setSpeed(value as [number, number])}\r\n        />\r\n        <Typography gutterBottom>Wind - Min {settings?.wind?.[0]} Max {settings?.wind?.[1]}</Typography>\r\n        <Slider\r\n          value={settings.wind}\r\n          min={-1}\r\n          max={10}\r\n          step={0.5}\r\n          onChange={(_, value) => settings.setWind(value as [number, number])}\r\n        />\r\n        <Typography gutterBottom>Radius - Min {settings?.radius?.[0]} Max {settings?.radius?.[1]}</Typography>\r\n        <Slider\r\n          value={settings.radius}\r\n          min={0.5}\r\n          max={5}\r\n          step={0.5}\r\n          onChange={(_, value) => settings.setRadius(value as [number, number])}\r\n        />\r\n        <Box my={2}>\r\n          <Typography gutterBottom>Color - {settings.color}</Typography>\r\n          <CirclePicker\r\n            colors={colors}\r\n            width=\"100%\"\r\n            color={settings.color}\r\n            onChangeComplete={value => settings.setColor(value.hex)}\r\n          />\r\n        </Box>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","import React, { useContext } from 'react'\r\nimport Snowfall from 'react-snowfall'\r\nimport GithubLink from './components/GithubLink/GithubLink'\r\nimport Settings from './components/Settings'\r\nimport { SettingsContext } from './context/settings'\r\nimport './App.css'\r\n\r\nconst githubURL = process.env.REACT_APP_GITHUB_URL as string\r\nconst packageName = process.env.REACT_APP_PACKAGE_NAME as string\r\n\r\nconst App = () => {\r\n  const settings = useContext(SettingsContext)\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Snowfall color={settings.color} snowflakeCount={settings.snowflakeCount} radius={settings.radius} speed={settings.speed} wind={settings.wind} />\r\n      <a className=\"title\" href={githubURL} style={{ color: settings.color }}>\r\n        <img src=\"./android-chrome-512x512.png\" alt=\"Snowflake Logo\" />\r\n        <h1>{packageName}</h1>\r\n      </a>\r\n      <Settings />\r\n      <GithubLink url={githubURL} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { StateProvider } from './context/settings'\r\n\r\nReactDOM.render(\r\n  <StateProvider>\r\n    <App />\r\n  </StateProvider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.register()\r\n"],"sourceRoot":""}