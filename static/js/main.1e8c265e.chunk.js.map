{"version":3,"sources":["GithubLink.tsx","App.tsx","serviceWorker.js","index.js"],"names":["GithubLink","_ref","url","react","href","className","aria-label","width","height","viewBox","style","fill","color","position","top","border","right","zIndex","aria-hidden","d","join","transformOrigin","githubURL","process","REACT_APP_GITHUB_URL","App","react_default","a","createElement","src_GithubLink","Snowfall_default","snowflakeCount","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4MAsGeA,EAhGgC,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,IAAH,OAC7CC,EAAA,mBAAGC,KAAMF,EAAKG,UAAU,gBAAgBC,aAAW,yBACjDH,EAAA,qBACEI,MAAM,KACNC,OAAO,KACPC,QAAQ,cACRC,MAAO,CACLC,KAAM,UACNC,MAAO,OACPC,SAAU,WACVC,IAAK,EACLC,OAAQ,EACRC,MAAO,EACPC,OAAQ,GAEVC,cAAY,QAEZf,EAAA,sBAAMgB,EAAE,sDACRhB,EAAA,sBACEgB,EAAG,CACD,eACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,cACA,eACAC,KAAK,KACPT,KAAK,eACLD,MAAO,CAAEW,gBAAiB,eAC1BhB,UAAU,aAEZF,EAAA,sBACEgB,EAAG,CACD,eACA,eACA,cACA,cACA,eACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,eACA,cACA,cACA,eACA,cACA,cACA,eACA,cACA,cACA,eACA,eACA,cACA,cACA,KACAC,KAAK,KACPT,KAAK,oBC3FPW,SAAYC,uDAAYC,sBAefC,mLAXX,OACEC,EAAAC,EAAAC,cAAA,OAAKvB,UAAU,OACbqB,EAAAC,EAAAC,cAACC,EAAD,CAAY3B,IAAKoB,IACjBI,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAUI,eAAgB,MAC1BL,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,KAAGxB,KAAMkB,GAAT,2BAPUU,aCKZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC3FjEC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIzC,YAAwBY,OAAOC,SAAShC,MACpD6D,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAA2B,OAAM5C,YAAN,sBAEPU,GAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,GACHK,KAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,KAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,KAAK,WAC7BV,OAAOC,SAASyC,aAKpBtC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,MC5C/BE","file":"static/js/main.1e8c265e.chunk.js","sourcesContent":["import * as React from 'react'\n\nexport interface GithubLinkProps {\n  url: string\n}\n\nconst GithubLink: React.SFC<GithubLinkProps> = ({ url }) => (\n  <a href={url} className=\"github-corner\" aria-label=\"View source on GitHub\">\n    <svg\n      width=\"80\"\n      height=\"80\"\n      viewBox=\"0 0 250 250\"\n      style={{\n        fill: '#64CEAA',\n        color: '#fff',\n        position: 'absolute',\n        top: 0,\n        border: 0,\n        right: 0,\n        zIndex: 5\n      }}\n      aria-hidden=\"true\"\n    >\n      <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n      <path\n        d={[\n          'M128.3,109.0',\n          'C113.8,99.7',\n          '119.0,89.6',\n          '119.0,89.6',\n          'C122.0,82.7',\n          '120.5,78.6',\n          '120.5,78.6',\n          'C119.2,72.0',\n          '123.4,76.3',\n          '123.4,76.3',\n          'C127.3,80.9',\n          '125.5,87.3',\n          '125.5,87.3',\n          'C122.9,97.6',\n          '130.6,101.9',\n          '134.4,103.2'\n        ].join(' ')}\n        fill=\"currentColor\"\n        style={{ transformOrigin: '130px 106px' }}\n        className=\"octo-arm\"\n      />\n      <path\n        d={[\n          'M115.0,115.0',\n          'C114.9,115.1',\n          '118.7,116.5',\n          '119.8,115.4',\n          'L133.7,101.6',\n          'C136.9,99.2',\n          '139.9,98.4',\n          '142.2,98.6',\n          'C133.8,88.0',\n          '127.5,74.4',\n          '143.8,58.0',\n          'C148.5,53.4',\n          '154.0,51.2',\n          '159.7,51.0',\n          'C160.3,49.4',\n          '163.2,43.6',\n          '171.4,40.1',\n          'C171.4,40.1',\n          '176.1,42.5',\n          '178.8,56.2',\n          'C183.1,58.6',\n          '187.2,61.8',\n          '190.9,65.4',\n          'C194.5,69.0',\n          '197.7,73.2',\n          '200.1,77.6',\n          'C213.8,80.2',\n          '216.3,84.9',\n          '216.3,84.9',\n          'C212.7,93.1',\n          '206.9,96.0',\n          '205.4,96.6',\n          'C205.1,102.4',\n          '203.0,107.8',\n          '198.3,112.5',\n          'C181.9,128.9',\n          '168.3,122.5',\n          '157.7,114.1',\n          'C157.9,116.9',\n          '156.7,120.9',\n          '152.7,124.9',\n          'L141.0,136.5',\n          'C139.8,137.7',\n          '141.6,141.9',\n          '141.8,141.8',\n          'Z'\n        ].join(' ')}\n        fill=\"currentColor\"\n      />\n    </svg>\n  </a>\n)\n\nexport default GithubLink\n","import React, { Component } from 'react'\nimport Snowfall from '@cahil/snowfall'\nimport GithubLink from './GithubLink'\nimport './App.css'\n\nconst githubURL = process.env.REACT_APP_GITHUB_URL as string\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <GithubLink url={githubURL} />\n        <Snowfall snowflakeCount={200} />\n        <h1>snowfall</h1>\n        <a href={githubURL}>@cahil/snowfall</a>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.register()\n"],"sourceRoot":""}